import math
import numpy as np

print(math.pi)

#Take necesarry input values
n = int(input("Enter the number of particles: "))
timeInstant = float(input("Enter the time instant: "))
tolerance = int(input("Enter the tolerance to terminate: "))
maxIteration = int(input("Enter the max number of iterations to terminate: "))

#For Gauss Elimination We will use Thomas Algorithm to solve this special matrix, which is a tridiagonal system
#Creating variable arrays for the Thomas Algorithm for ease of use
#Initialise Arrays
a = np.zeros(n-1)
b = np.zeros(n)
c = np.zeros(n-1)
d = np.zeros(n)

#Fill Them up
a.fill(1)
b.fill(-2)
c.fill(1)
c[0] = 0
b[0] = 1
b[n-1] = 1
a[n-2] = 0
d[0] = float(0.25 * math.sin(math.pi * timeInstant))
d[n-1] = 1

#Debug

print(" a values are: ")
print(a)
print(" b values are: ")
print(b)    
print(" c values are: ")
print(c)
print(" Position values are: ")
print(d)


def gaussEliminationMethod(ag, bg, cg, dg):
#Attention Points
# -Index of a array and c array values 
# Because a values start from i = 1 instead of i = 0

    #Loops for Forward Elimination
    for i in range(cg.size):
        print("cg iteration number: " + str(i))
        if i == 0:
            #print(cg[int(i)])
            cg[int(i)] = cg[int(i)]/bg[int(i)]
            print("cg " + str(i) + " is now: " + str(cg[i]))
        else:
            cg[int(i)] = cg[i] / (bg[i] - (cg[i-1]*ag[i-1]))
            print("cg " + str(i) + " is now: " + str(cg[i]))

    for i in range(dg.size):
        print("dg iteration number: " + str(i))
        if i == 0:
            dg[i] = dg[i]/bg[i]
            print("dg " + str(i) + " is now: " + str(dg[i]))
        else:
            dg[i] = (dg[i] - (dg[i - 1] * ag[i-1])) / (bg[i] - (cg[i - 1] * ag[i-1]) )
            print("dg " + str(i) + " is now: " + str(dg[i]))

    #Back Substitution
    #Check index of cg
    roots = np.zeros(n)
    for i in range(dg.size):
        print("root iteration number: " + str(i))
        if i == 0:
            roots[n-i-1] = dg[n-i-1]
        else:
            roots[n-i-1] = dg[n-i-1] - (cg[n-i-1]*roots[n-i-1])
        print("root " + str(n-1-i) + " is now: " + str(roots[n-i-1]))

    return roots

print(gaussEliminationMethod(a,b,c,d))